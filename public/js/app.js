(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var longpresser_1 = require('./longpresser');
var wasPressed = false;
var numExtras = 0;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    view: function (vnode) {
        return m('div', [
            m('div', { class: 'pressme' }, m(longpresser_1.default, {
                text: "Press Me",
                textColor: '#FFF',
                fgStrokeColor: '#F00',
                bgStrokeColor: '#A00',
                bgFillColor: '#800',
                duration: 0.75,
                onpressed: function () { wasPressed = true; }
            })),
            m('span', { style: { marginLeft: '2em' } }, wasPressed ? 'Pressed!' : ''),
            m('p', m('button', { onclick: function () { ++numExtras; } }, "Create another")),
            // Add any extra longpressers that were created by user
            m('p', (function () {
                var extras = [];
                for (var i = 0; i < numExtras; ++i) {
                    extras.push(m('div', { class: 'pressme', style: { width: '100px', height: '100px' } }, m(longpresser_1.default, {
                        text: "Press me " + (i + 1),
                        textColor: '#333',
                        fgStrokeColor: '#666',
                        bgStrokeColor: '#888',
                        bgFillColor: '#EEE',
                        duration: 0.75
                    })));
                }
                return extras;
            }()))
        ]);
    }
};
},{"./longpresser":2}],2:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DEFAULT_DURATION = 1 * 1000;
var RADIUS = 50;
var STROKE_WIDTH = 8;
var F_STROKE_WIDTH = 1;
// in the absense of Pointer events support...
var DEVICE_NONE = 0;
var DEVICE_MOUSE = 1;
var DEVICE_TOUCH = 2;
var device = DEVICE_NONE;
//
// LongPresser component
//
var LongPresser = (function (_super) {
    __extends(LongPresser, _super);
    function LongPresser(_a) {
        var attrs = _a.attrs;
        _super.call(this);
        // Set up state vars
        this.duration = (+attrs.duration > 0) ? (+attrs.duration) * 1000 : DEFAULT_DURATION;
        this.fgStrokeColor = attrs.fgStrokeColor;
        this.bgStrokeColor = attrs.bgStrokeColor;
        this.isPressed = false;
        this.pressT = 0;
        this.isFinished = false;
        this.prevT = Date.now();
    }
    LongPresser.prototype.oncreate = function (_a) {
        var _this = this;
        var dom = _a.dom;
        // Grab some elements we'll use a lot
        this.el = dom;
        this.elSvg = this.el.childNodes[0];
        this.elBgCircle = this.elSvg.childNodes[0];
        this.elArc = this.elSvg.childNodes[1];
        this.elText = this.elSvg.childNodes[2];
        this.elFgCircle = this.elSvg.childNodes[3];
        this.elFgText = this.elSvg.childNodes[4];
        // Add our own event listeners hidden from Mithril
        this.el.addEventListener('mousedown', function () {
            if (device !== DEVICE_TOUCH) {
                device = DEVICE_MOUSE;
                if (!_this.isPressed) {
                    _this.startPress();
                }
            }
        });
        this.el.addEventListener('mouseup', function () {
            if (device !== DEVICE_TOUCH) {
                device = DEVICE_MOUSE;
                if (_this.isPressed) {
                    _this.endPress();
                }
            }
        });
        this.el.addEventListener('touchstart', function () {
            if (device !== DEVICE_MOUSE) {
                device = DEVICE_TOUCH;
                if (!_this.isPressed) {
                    _this.startPress();
                }
            }
        });
        this.el.addEventListener('touchend', function () {
            if (device !== DEVICE_MOUSE) {
                device = DEVICE_TOUCH;
                if (_this.isPressed) {
                    _this.endPress();
                }
            }
        });
    };
    LongPresser.prototype.view = function (_a) {
        var attrs = _a.attrs;
        console.log('LongPresser view called');
        return m('div', { class: 'longpresser', style: { cursor: this.isFinished ? 'default' : 'pointer' }, onpressed: attrs.onpressed }, m('svg', { viewBox: "0 0 " + RADIUS * 2 + " " + RADIUS * 2, version: '1.1', xmlns: 'http://www.w3.org/2000/svg' }, m('circle', { cx: RADIUS, cy: RADIUS, r: RADIUS - STROKE_WIDTH / 2, style: { fill: attrs.bgFillColor, stroke: this.isFinished ? attrs.fgStrokeColor : attrs.bgStrokeColor, strokeWidth: STROKE_WIDTH } }), m('path', { d: svgArcPath(RADIUS, RADIUS, RADIUS - STROKE_WIDTH / 2, 0, 360.0 * accel(this.pressT / this.duration)), style: { fill: 'transparent', stroke: attrs.fgStrokeColor, strokeWidth: STROKE_WIDTH } }), m('text', { x: RADIUS, y: RADIUS, style: { textAnchor: 'middle', dominantBaseline: 'middle', fontSize: '0.95em', fill: attrs.textColor } }, attrs.text), m('circle', { cx: RADIUS, cy: RADIUS, r: RADIUS - F_STROKE_WIDTH / 2, style: { fill: '#EEE', stroke: '#CCC', strokeWidth: F_STROKE_WIDTH, opacity: this.isFinished ? 1 : 0 } }), m('text', { x: RADIUS, y: RADIUS, style: { textAnchor: 'middle', dominantBaseline: 'middle', fontSize: '1.5em', fill: '#000', opacity: this.isFinished ? 1 : 0 } }, m.trust('&#10004'))));
    };
    // Internally used methods
    LongPresser.prototype.startPress = function () {
        var _this = this;
        this.isPressed = true;
        this.prevT = Date.now();
        requestAnimationFrame(function () { _this.updatePress(); });
    };
    LongPresser.prototype.endPress = function () {
        this.isPressed = false;
    };
    LongPresser.prototype.updatePress = function () {
        var _this = this;
        if (!this.isPressed) {
            this.updateRelease();
            return;
        }
        var t = Date.now();
        var dt = t - this.prevT;
        this.pressT = Math.min(this.pressT + dt, this.duration);
        drawArc(this.elArc, accel(this.pressT / this.duration));
        this.prevT = t;
        if (this.pressT >= this.duration) {
            this.finish();
            return; // cancel the animation loop by exiting here
        }
        // Keep animation running
        requestAnimationFrame(function () { _this.updatePress(); });
    };
    LongPresser.prototype.updateRelease = function () {
        var _this = this;
        var t = Date.now();
        var dt = t - this.prevT;
        this.pressT = Math.max(this.pressT - dt, 0);
        drawArc(this.elArc, accel(this.pressT / this.duration));
        this.prevT = t;
        if (this.pressT <= 0) {
            return; // cancel the animation loop by exiting here
        }
        // Keep animation running
        // Use updatPress in case isPressed state changes
        requestAnimationFrame(function () { _this.updatePress(); });
    };
    LongPresser.prototype.finish = function () {
        drawArc(this.elArc, 0);
        this.el.style.cursor = 'default';
        this.elBgCircle.style.stroke = this.fgStrokeColor;
        this.pressT = 0;
        this.isPressed = false;
        this.isFinished = true;
        fadeIn(this.elFgCircle);
        fadeIn(this.elFgText);
        this.el.dispatchEvent(new Event('pressed'));
    };
    LongPresser.prototype.reset = function () {
        this.isPressed = false;
        this.pressT = 0;
        this.elBgCircle.style.stroke = this.bgStrokeColor;
        this.el.style.cursor = 'pointer';
        drawArc(this.elArc, 0);
        this.isFinished = false;
        // Hide the 'finished' elements
        removeFadeIn(this.elFgCircle);
        removeFadeIn(this.elFgText);
    };
    return LongPresser;
}(m.Component));
// SVG Arc helper functions (because arcs are otherwise difficult with SVG!)
function polarToCartesian(centerX, centerY, radius, degrees, out) {
    var r = (degrees - 90) * Math.PI / 180.0;
    out.x = centerX + (radius * Math.cos(r));
    out.y = centerY + (radius * Math.sin(r));
    return out;
}
// Create an SVG arc definition centred at x,y with radius,
// start and end angles (clockwise, in degrees)
var svgArcPath = (function () {
    var _p0 = { x: 0, y: 0 };
    var _p1 = { x: 0, y: 0 };
    function svgArcPath(x, y, radius, startAngle, endAngle) {
        polarToCartesian(x, y, radius, endAngle, _p0);
        polarToCartesian(x, y, radius, startAngle, _p1);
        var arcSweep = endAngle - startAngle <= 180 ? '0' : '1';
        return 'M ' + _p0.x + ' ' + _p0.y +
            'A ' + radius + ' ' + radius + ' 0 ' + arcSweep + ' 0 ' + _p1.x + ' ' + _p1.y;
    }
    return svgArcPath;
}());
/**
 * Draw % of arc
 * @param {HTMLElement} el
 * @param {number} pct
 */
function drawArc(el, pct) {
    el.setAttribute('d', svgArcPath(RADIUS, RADIUS, RADIUS - STROKE_WIDTH / 2, 0, pct * 360));
}
/** Non-linear arc motion */
function accel(t) {
    return Math.pow(t, 2.25);
}
function fadeIn(el) {
    el.style.opacity = '1';
    el.classList.add('longpresser-fade-in');
}
function removeFadeIn(el) {
    el.style.opacity = '0';
    el.classList.remove('longpresser-fade-in');
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LongPresser;
},{}],3:[function(require,module,exports){
"use strict";
var app_1 = require('./app');
window.addEventListener('load', function () {
    m.mount(document.getElementById('app'), app_1.default);
});
},{"./app":1}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
